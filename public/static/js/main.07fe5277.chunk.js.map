{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getBookQuery","_templateObject2","getAuthorsQuery","_templateObject3","addBookMutation","_templateObject4","graphql","options","props","variables","id","bookId","react_default","a","createElement","book","data","name","genre","author","className","books","map","b","key","displayBookDetails","href","target","_useState","useState","_useState2","Object","slicedToArray","selectedBook","setSelectedBook","loading","onClick","e","displayBooks","components_BookDetails","compose","setName","_useState3","_useState4","setGenre","_useState5","_useState6","authorId","setAuthorId","onSubmit","preventDefault","refetchQueries","query","bind","this","type","onChange","value","authors","find","disabled","data-key","client","ApolloClient","uri","App","react_apollo_esm","components_BookList","components_AddBook","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.07fe5277.chunk.js","sourcesContent":["import {gql} from 'apollo-boost'\r\n\r\nconst getBooksQuery = gql`\r\n{\r\n  books{\r\n    name\r\n    id\r\n  }\r\n}\r\n`\r\n\r\nconst getBookQuery = gql`\r\nquery($id: ID){\r\n  book(id: $id){\r\n    name\r\n    id\r\n    genre\r\n    author{\r\n      id\r\n      name\r\n      age\r\n      books{\r\n        name\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nconst getAuthorsQuery = gql`\r\n{\r\n  authors{\r\n    name\r\n    id\r\n  }\r\n}\r\n`\r\n\r\nconst addBookMutation = gql `\r\nmutation($name: String!, $genre: String!, $authorId: ID!){\r\n  addBook(name: $name, genre: $genre, authorId: $authorId){\r\n    name\r\n    id\r\n  }\r\n}\r\n`\r\n\r\nexport {getBooksQuery, getAuthorsQuery, addBookMutation, getBookQuery}\r\n","import React from 'react';\r\nimport {graphql} from 'react-apollo'\r\nimport {getBookQuery} from '../queries/queries'\r\n\r\nfunction BookDetails(props) {\r\n  let displayBookDetails = () => {\r\n    const { book } = props.data\r\n    if(book){\r\n      return (\r\n        <div>\r\n          <h2>{book.name}</h2>\r\n          <p>{book.genre}</p>\r\n          <p>{book.author.name}</p>\r\n          <p>All books by this author: </p>\r\n          <ul className=\"other-books\">\r\n            {\r\n              book.author.books.map(b => {\r\n                return (<li key={b.id}>{b.name}</li>)\r\n              })\r\n            }\r\n          </ul>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (<div>No book selected ...</div>)\r\n    }\r\n  }\r\n  return (\r\n    <div id=\"book-details\">\r\n      {displayBookDetails()}\r\n      <p className=\"credit\">Awesome tutorial by <em><strong><a href=\"https://www.youtube.com/playlist?list=PL4cUxeGkcC9iK6Qhn-QLcXCXPQUov1U7f\" target=\"_blank\">The Net Ninja</a></strong></em></p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default graphql(getBookQuery, {\r\n  options: props => {\r\n    return {\r\n      variables: {\r\n        id: props.bookId\r\n      }\r\n    }\r\n  }\r\n})(BookDetails);\r\n","import React, { useState } from 'react';\r\nimport {graphql} from 'react-apollo'\r\nimport {getBooksQuery} from '../queries/queries'\r\nimport BookDetails from './BookDetails'\r\n\r\nfunction BookList(props) {\r\n  const [selectedBook, setSelectedBook] = useState(null)\r\n  let displayBooks = () => {\r\n    let data = props.data\r\n    if(data.loading){\r\n      return (<div>Loading books ...</div>)\r\n    } else {\r\n      return data.books.map(b => {\r\n        return (\r\n          <li key={b.id} onClick={e => setSelectedBook(b.id)} >{b.name}</li>\r\n        )\r\n      })\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <ul id=\"book-list\">\r\n        {displayBooks()}\r\n      </ul>\r\n      <BookDetails bookId={selectedBook}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default graphql(getBooksQuery)(BookList);\r\n","import React , { useState } from 'react';\r\nimport {graphql, compose} from 'react-apollo'\r\nimport {getAuthorsQuery, addBookMutation, getBooksQuery} from '../queries/queries'\r\n\r\nfunction AddBook(props) {\r\n  const [name, setName] = useState(\"\")\r\n  const [genre, setGenre] = useState(\"\")\r\n  const [authorId, setAuthorId] = useState(\"\")\r\n  var data\r\n  let displayAuthors = () => {\r\n    data = props.getAuthorsQuery\r\n    if(data.loading){\r\n      return (<option disabled>Loading Authors ...</option>)\r\n    } else {\r\n      return data.authors.map(a => {\r\n        return (<option key={a.id} data-key={a.id}>{a.name}</option>)\r\n      })\r\n    }\r\n  }\r\n  let submitForm = (e) => {\r\n    e.preventDefault()\r\n    props.addBookMutation({\r\n      variables: {\r\n        name, genre, authorId\r\n      },\r\n      refetchQueries: [{\r\n        query: getBooksQuery\r\n      }]\r\n    })\r\n  }\r\n  return (\r\n    <form id=\"add-book\" onSubmit={submitForm.bind(this)}>\r\n\r\n      <div className=\"field\">\r\n        <label>Book Name: </label>\r\n        <input type=\"text\" onChange={e => setName(e.target.value)}/>\r\n      </div>\r\n\r\n      <div className=\"field\">\r\n        <label>Genre: </label>\r\n        <input type=\"text\" onChange={e => setGenre(e.target.value)}/>\r\n      </div>\r\n\r\n      <div className=\"field\">\r\n        <label>Author: </label>\r\n        <select onChange={e => setAuthorId(data.authors.find(a => a.name === e.target.value) ? data.authors.find(a => a.name === e.target.value).id : null)}>\r\n          <option>Select Author --</option>\r\n          {displayAuthors()}\r\n        </select>\r\n      </div>\r\n\r\n      <button>+</button>\r\n\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default compose(\r\n  graphql(getAuthorsQuery, {name: \"getAuthorsQuery\"}),\r\n  graphql(addBookMutation, {name: \"addBookMutation\"})\r\n\r\n)(AddBook);\r\n","import React from 'react';\nimport ApolloClient from 'apollo-boost'\nimport {ApolloProvider} from 'react-apollo'\n\nimport BookList from './components/BookList'\nimport AddBook from './components/AddBook'\n\n//var port = process.env.PORT || 4000\n\nconst client = new ApolloClient({\n  uri: `/graphql`\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div id=\"main\">\n        <h1>Book-O-Pedia</h1>\n        <BookList />\n        <AddBook />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}